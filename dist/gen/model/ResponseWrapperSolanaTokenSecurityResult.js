"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResponseWrapperSolanaTokenSecurityResult = void 0;
var _ApiClient = require("../ApiClient");
var _ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority = require("./ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority");
var _ResponseWrapperSolanaTokenSecurityClosable = require("./ResponseWrapperSolanaTokenSecurityClosable");
var _ResponseWrapperSolanaTokenSecurityCreator = require("./ResponseWrapperSolanaTokenSecurityCreator");
var _ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable = require("./ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable");
var _ResponseWrapperSolanaTokenSecurityDex = require("./ResponseWrapperSolanaTokenSecurityDex");
var _ResponseWrapperSolanaTokenSecurityFreezable = require("./ResponseWrapperSolanaTokenSecurityFreezable");
var _ResponseWrapperSolanaTokenSecurityLpHolders = require("./ResponseWrapperSolanaTokenSecurityLpHolders");
var _ResponseWrapperSolanaTokenSecurityMetadata = require("./ResponseWrapperSolanaTokenSecurityMetadata");
var _ResponseWrapperSolanaTokenSecurityMetadataMutable = require("./ResponseWrapperSolanaTokenSecurityMetadataMutable");
var _ResponseWrapperSolanaTokenSecurityMintable = require("./ResponseWrapperSolanaTokenSecurityMintable");
var _ResponseWrapperSolanaTokenSecurityTransferFee = require("./ResponseWrapperSolanaTokenSecurityTransferFee");
var _ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable = require("./ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable");
var _ResponseWrapperSolanaTokenSecurityTransferHook = require("./ResponseWrapperSolanaTokenSecurityTransferHook");
var _ResponseWrapperSolanaTokenSecurityTransferHookUpgradable = require("./ResponseWrapperSolanaTokenSecurityTransferHookUpgradable");
/*
 * GoPlus Security API Document
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.45
 *
 * Do not edit the class manually.
 *
 */

/**
 * The ResponseWrapperSolanaTokenSecurityResult model module.
 * @module model/ResponseWrapperSolanaTokenSecurityResult
 * @version 1.0
 */
class ResponseWrapperSolanaTokenSecurityResult {
  /**
   * Constructs a new <code>ResponseWrapperSolanaTokenSecurityResult</code>.
   * key is contract address
   * @alias module:model/ResponseWrapperSolanaTokenSecurityResult
   * @class
   */
  constructor() {}

  /**
   * Constructs a <code>ResponseWrapperSolanaTokenSecurityResult</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ResponseWrapperSolanaTokenSecurityResult} obj Optional instance to populate.
   * @return {module:model/ResponseWrapperSolanaTokenSecurityResult} The populated <code>ResponseWrapperSolanaTokenSecurityResult</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ResponseWrapperSolanaTokenSecurityResult();
      if (data.hasOwnProperty('metadata')) obj.metadata = _ResponseWrapperSolanaTokenSecurityMetadata.ResponseWrapperSolanaTokenSecurityMetadata.constructFromObject(data['metadata']);
      if (data.hasOwnProperty('creator')) obj.creator = _ApiClient.ApiClient.convertToType(data['creator'], [_ResponseWrapperSolanaTokenSecurityCreator.ResponseWrapperSolanaTokenSecurityCreator]);
      if (data.hasOwnProperty('lp_holders')) obj.lp_holders = _ApiClient.ApiClient.convertToType(data['lp_holders'], [_ResponseWrapperSolanaTokenSecurityLpHolders.ResponseWrapperSolanaTokenSecurityLpHolders]);
      if (data.hasOwnProperty('closable')) obj.closable = _ResponseWrapperSolanaTokenSecurityClosable.ResponseWrapperSolanaTokenSecurityClosable.constructFromObject(data['closable']);
      if (data.hasOwnProperty('transfer_hook')) obj.transfer_hook = _ApiClient.ApiClient.convertToType(data['transfer_hook'], [_ResponseWrapperSolanaTokenSecurityTransferHook.ResponseWrapperSolanaTokenSecurityTransferHook]);
      if (data.hasOwnProperty('transfer_hook_upgradable')) obj.transfer_hook_upgradable = _ResponseWrapperSolanaTokenSecurityTransferHookUpgradable.ResponseWrapperSolanaTokenSecurityTransferHookUpgradable.constructFromObject(data['transfer_hook_upgradable']);
      if (data.hasOwnProperty('trusted_token')) obj.trusted_token = _ApiClient.ApiClient.convertToType(data['trusted_token'], 'String');
      if (data.hasOwnProperty('default_account_state_upgradable')) obj.default_account_state_upgradable = _ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable.ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable.constructFromObject(data['default_account_state_upgradable']);
      if (data.hasOwnProperty('none_transferable')) obj.none_transferable = _ApiClient.ApiClient.convertToType(data['none_transferable'], 'String');
      if (data.hasOwnProperty('default_account_state')) obj.default_account_state = _ApiClient.ApiClient.convertToType(data['default_account_state'], 'String');
      if (data.hasOwnProperty('mintable')) obj.mintable = _ResponseWrapperSolanaTokenSecurityMintable.ResponseWrapperSolanaTokenSecurityMintable.constructFromObject(data['mintable']);
      if (data.hasOwnProperty('balance_mutable_authority')) obj.balance_mutable_authority = _ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority.ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority.constructFromObject(data['balance_mutable_authority']);
      if (data.hasOwnProperty('transfer_fee')) obj.transfer_fee = _ResponseWrapperSolanaTokenSecurityTransferFee.ResponseWrapperSolanaTokenSecurityTransferFee.constructFromObject(data['transfer_fee']);
      if (data.hasOwnProperty('holders')) obj.holders = _ApiClient.ApiClient.convertToType(data['holders'], [_ResponseWrapperSolanaTokenSecurityLpHolders.ResponseWrapperSolanaTokenSecurityLpHolders]);
      if (data.hasOwnProperty('freezable')) obj.freezable = _ResponseWrapperSolanaTokenSecurityFreezable.ResponseWrapperSolanaTokenSecurityFreezable.constructFromObject(data['freezable']);
      if (data.hasOwnProperty('metadata_mutable')) obj.metadata_mutable = _ResponseWrapperSolanaTokenSecurityMetadataMutable.ResponseWrapperSolanaTokenSecurityMetadataMutable.constructFromObject(data['metadata_mutable']);
      if (data.hasOwnProperty('dex')) obj.dex = _ApiClient.ApiClient.convertToType(data['dex'], [_ResponseWrapperSolanaTokenSecurityDex.ResponseWrapperSolanaTokenSecurityDex]);
      if (data.hasOwnProperty('transfer_fee_upgradable')) obj.transfer_fee_upgradable = _ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable.ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable.constructFromObject(data['transfer_fee_upgradable']);
    }
    return obj;
  }
}

/**
 * @member {module:model/ResponseWrapperSolanaTokenSecurityMetadata} metadata
 */
exports.ResponseWrapperSolanaTokenSecurityResult = ResponseWrapperSolanaTokenSecurityResult;
ResponseWrapperSolanaTokenSecurityResult.prototype.metadata = undefined;

/**
 * Contains information about the token creators.
 * @member {Array.<module:model/ResponseWrapperSolanaTokenSecurityCreator>} creator
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.creator = undefined;

/**
 * List of top10 liquidity holders and their balances of the largest main token(SOL, USDC, USDT) liquidity pool.
 * @member {Array.<module:model/ResponseWrapperSolanaTokenSecurityLpHolders>} lp_holders
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.lp_holders = undefined;

/**
 * @member {module:model/ResponseWrapperSolanaTokenSecurityClosable} closable
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.closable = undefined;

/**
 * If there is any external hook in the token programme.(Notice: Hook may block user from trading)
 * @member {Array.<module:model/ResponseWrapperSolanaTokenSecurityTransferHook>} transfer_hook
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.transfer_hook = undefined;

/**
 * @member {module:model/ResponseWrapperSolanaTokenSecurityTransferHookUpgradable} transfer_hook_upgradable
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.transfer_hook_upgradable = undefined;

/**
 * If the token is a famous and trustworthy one. \"1\" means yes.
 * @member {String} trusted_token
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.trusted_token = undefined;

/**
 * @member {module:model/ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable} default_account_state_upgradable
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.default_account_state_upgradable = undefined;

/**
 * Indicates whether the token is non-transferable, \"1\" means non-transferable, \"0\" means transferable
 * @member {String} none_transferable
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.none_transferable = undefined;

/**
 * The default state of newly created accounts. \"0\" for Uninitialized, \"1\" for Initialized, \"2\" for Frozen.(Notice: Uninitialized (0): The token is newly created and not ready for use. It cannot perform any token operations and typically needs to be initialized to become active. Initialized (1): The token is fully ready for use and can engage in normal token transactions. Most token operations require the account to be in this state. Frozen (2): All the account that created whe the token is \"frozen\" would be locked and prohibited from performing any token transactions or operations, usually for security or compliance reasons, until it is manually unfrozen.)
 * @member {String} default_account_state
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.default_account_state = undefined;

/**
 * @member {module:model/ResponseWrapperSolanaTokenSecurityMintable} mintable
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.mintable = undefined;

/**
 * @member {module:model/ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority} balance_mutable_authority
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.balance_mutable_authority = undefined;

/**
 * @member {module:model/ResponseWrapperSolanaTokenSecurityTransferFee} transfer_fee
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.transfer_fee = undefined;

/**
 * List of top 10 addresses holding the token and their balances.
 * @member {Array.<module:model/ResponseWrapperSolanaTokenSecurityLpHolders>} holders
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.holders = undefined;

/**
 * @member {module:model/ResponseWrapperSolanaTokenSecurityFreezable} freezable
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.freezable = undefined;

/**
 * @member {module:model/ResponseWrapperSolanaTokenSecurityMetadataMutable} metadata_mutable
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.metadata_mutable = undefined;

/**
 * Dex Info
 * @member {Array.<module:model/ResponseWrapperSolanaTokenSecurityDex>} dex
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.dex = undefined;

/**
 * @member {module:model/ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable} transfer_fee_upgradable
 */
ResponseWrapperSolanaTokenSecurityResult.prototype.transfer_fee_upgradable = undefined;