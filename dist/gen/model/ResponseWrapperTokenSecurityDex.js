"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResponseWrapperTokenSecurityDex = void 0;
var _ApiClient = require("../ApiClient");
/*
 * GoPlus Security API Document
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.45
 *
 * Do not edit the class manually.
 *
 */

/**
 * The ResponseWrapperTokenSecurityDex model module.
 * @module model/ResponseWrapperTokenSecurityDex
 * @version 1.0
 */
class ResponseWrapperTokenSecurityDex {
  /**
   * Constructs a new <code>ResponseWrapperTokenSecurityDex</code>.
   * @alias module:model/ResponseWrapperTokenSecurityDex
   * @class
   */
  constructor() {}

  /**
   * Constructs a <code>ResponseWrapperTokenSecurityDex</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ResponseWrapperTokenSecurityDex} obj Optional instance to populate.
   * @return {module:model/ResponseWrapperTokenSecurityDex} The populated <code>ResponseWrapperTokenSecurityDex</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ResponseWrapperTokenSecurityDex();
      if (data.hasOwnProperty('name')) obj.name = _ApiClient.ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('liquidity')) obj.liquidity = _ApiClient.ApiClient.convertToType(data['liquidity'], 'String');
      if (data.hasOwnProperty('pair')) obj.pair = _ApiClient.ApiClient.convertToType(data['pair'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} name
 */
exports.ResponseWrapperTokenSecurityDex = ResponseWrapperTokenSecurityDex;
ResponseWrapperTokenSecurityDex.prototype.name = undefined;

/**
 * Liquidity is converted to USDT denomination.
 * @member {String} liquidity
 */
ResponseWrapperTokenSecurityDex.prototype.liquidity = undefined;

/**
 *  It only counts when the token has a marketing pair with mainstream 
 * @member {String} pair
 */
ResponseWrapperTokenSecurityDex.prototype.pair = undefined;