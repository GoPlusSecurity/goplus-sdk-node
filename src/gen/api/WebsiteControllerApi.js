/*
 * GoPlus Security API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ResponseWrapperMapstringstring2a740de0Be5a4eb3B6e4A2cf0a2d8bf8} from '../model/ResponseWrapperMapstringstring2a740de0Be5a4eb3B6e4A2cf0a2d8bf8';

/**
* WebsiteController service.
* @module api/WebsiteControllerApi
* @version 1.0
*/
export class WebsiteControllerApi {

    /**
    * Constructs a new WebsiteControllerApi. 
    * @alias module:api/WebsiteControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the phishingSiteUsingGET operation.
     * @callback moduleapi/WebsiteControllerApi~phishingSiteUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWrapperMapstringstring2a740de0Be5a4eb3B6e4A2cf0a2d8bf8{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if the the url is a phishing site
     * @param {String} url Url
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization (testï¼šBearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
     * @param {module:api/WebsiteControllerApi~phishingSiteUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    phishingSiteUsingGET(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling phishingSiteUsingGET");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ResponseWrapperMapstringstring2a740de0Be5a4eb3B6e4A2cf0a2d8bf8;

      return this.apiClient.callApi(
        '/api/v1/phishing_site', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}