/*
 * GoPlus Security API Document
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.45
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {ResponseWrapperPhishingSiteResultNftRiskPrivilegedBurn} from './ResponseWrapperPhishingSiteResultNftRiskPrivilegedBurn';
import {ResponseWrapperPhishingSiteResultNftRiskPrivilegedMinting} from './ResponseWrapperPhishingSiteResultNftRiskPrivilegedMinting';
import {ResponseWrapperPhishingSiteResultNftRiskSelfDestruct} from './ResponseWrapperPhishingSiteResultNftRiskSelfDestruct';
import {ResponseWrapperPhishingSiteResultNftRiskTransferWithoutApproval} from './ResponseWrapperPhishingSiteResultNftRiskTransferWithoutApproval';

/**
 * The ResponseWrapperPhishingSiteResultNftRisk model module.
 * @module model/ResponseWrapperPhishingSiteResultNftRisk
 * @version 1.0
 */
export class ResponseWrapperPhishingSiteResultNftRisk {
  /**
   * Constructs a new <code>ResponseWrapperPhishingSiteResultNftRisk</code>.
   * nft check risk
   * @alias module:model/ResponseWrapperPhishingSiteResultNftRisk
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ResponseWrapperPhishingSiteResultNftRisk</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ResponseWrapperPhishingSiteResultNftRisk} obj Optional instance to populate.
   * @return {module:model/ResponseWrapperPhishingSiteResultNftRisk} The populated <code>ResponseWrapperPhishingSiteResultNftRisk</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ResponseWrapperPhishingSiteResultNftRisk();
      if (data.hasOwnProperty('nft_open_source'))
        obj.nft_open_source = ApiClient.convertToType(data['nft_open_source'], 'Number');
      if (data.hasOwnProperty('privileged_minting'))
        obj.privileged_minting = ResponseWrapperPhishingSiteResultNftRiskPrivilegedMinting.constructFromObject(data['privileged_minting']);
      if (data.hasOwnProperty('oversupply_minting'))
        obj.oversupply_minting = ApiClient.convertToType(data['oversupply_minting'], 'Number');
      if (data.hasOwnProperty('nft_proxy'))
        obj.nft_proxy = ApiClient.convertToType(data['nft_proxy'], 'Number');
      if (data.hasOwnProperty('restricted_approval'))
        obj.restricted_approval = ApiClient.convertToType(data['restricted_approval'], 'Number');
      if (data.hasOwnProperty('transfer_without_approval'))
        obj.transfer_without_approval = ResponseWrapperPhishingSiteResultNftRiskTransferWithoutApproval.constructFromObject(data['transfer_without_approval']);
      if (data.hasOwnProperty('privileged_burn'))
        obj.privileged_burn = ResponseWrapperPhishingSiteResultNftRiskPrivilegedBurn.constructFromObject(data['privileged_burn']);
      if (data.hasOwnProperty('self_destruct'))
        obj.self_destruct = ResponseWrapperPhishingSiteResultNftRiskSelfDestruct.constructFromObject(data['self_destruct']);
    }
    return obj;
  }
}

/**
 * It describes whether this contract is open source.  \"1\" means true;  \"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)
 * @member {Number} nft_open_source
 */
ResponseWrapperPhishingSiteResultNftRisk.prototype.nft_open_source = undefined;

/**
 * @member {module:model/ResponseWrapperPhishingSiteResultNftRiskPrivilegedMinting} privileged_minting
 */
ResponseWrapperPhishingSiteResultNftRisk.prototype.privileged_minting = undefined;

/**
 * It describes whether this NFT owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.  \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:Oversupply minting refers to the existence of a special mint method in the NFT contract - the owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.)
 * @member {Number} oversupply_minting
 */
ResponseWrapperPhishingSiteResultNftRisk.prototype.oversupply_minting = undefined;

/**
 * It describes whether this NFT contract has a proxy contract.  \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:(1) When \"is_open_source\":\"0\", it will return \"null\". (2) Most Proxy contracts are accompanied by modifiable implementation contracts, and implementation contracts may contain significant potential risk.)
 * @member {Number} nft_proxy
 */
ResponseWrapperPhishingSiteResultNftRisk.prototype.nft_proxy = undefined;

/**
 * It describes whether the NFT contract can restrict the approval, resulting in NFT can not be traded on the NFT DEX. \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:If this risk exists, it means that users will not be able to trade the NFT on the exchange and only privileged users in the whitelist will be able to trade normally.)
 * @member {Number} restricted_approval
 */
ResponseWrapperPhishingSiteResultNftRisk.prototype.restricted_approval = undefined;

/**
 * @member {module:model/ResponseWrapperPhishingSiteResultNftRiskTransferWithoutApproval} transfer_without_approval
 */
ResponseWrapperPhishingSiteResultNftRisk.prototype.transfer_without_approval = undefined;

/**
 * @member {module:model/ResponseWrapperPhishingSiteResultNftRiskPrivilegedBurn} privileged_burn
 */
ResponseWrapperPhishingSiteResultNftRisk.prototype.privileged_burn = undefined;

/**
 * @member {module:model/ResponseWrapperPhishingSiteResultNftRiskSelfDestruct} self_destruct
 */
ResponseWrapperPhishingSiteResultNftRisk.prototype.self_destruct = undefined;

